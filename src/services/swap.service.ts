// @ts-ignore
import {internal, SenderArguments} from '@ton/ton';
import { TonClient, WalletContractV4, toNano } from '@ton/ton';
import { mnemonicToPrivateKey } from '@ton/crypto';
import { StonApiClient } from '@ston-fi/api';
import { dexFactory } from '@ston-fi/sdk';
import { env, argv } from 'process';
import { Buffer } from 'buffer';
import type { AxiosError } from 'axios';

import { ApiErrorResponse, SimulationResult } from '../types/index.js';
import { ENDPOINTS, TON_ADDRESS } from '../config/config.js';
import { config } from 'dotenv';

config();

export class SwapService {
    private readonly client: TonClient;
    private readonly stonApiClient: StonApiClient;
    private readonly keyPair: { publicKey: Buffer; secretKey: Buffer; };
    private readonly wallet: WalletContractV4;

    private constructor(
        client: TonClient,
        stonApiClient: StonApiClient,
        keyPair: { publicKey: Buffer; secretKey: Buffer; },
        wallet: WalletContractV4,
    ) {
        this.client = client;
        this.stonApiClient = stonApiClient;
        this.keyPair = keyPair;
        this.wallet = wallet;
    }

    // –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    public static async createSwapService(): Promise<SwapService> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const apiKey = env.TON_CLIENT_API_KEY;
        if (!apiKey) {
            throw new Error('TON_CLIENT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        if (!env.MNEMONIC) {
            throw new Error('MNEMONIC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        const client = new TonClient({
            endpoint: ENDPOINTS.MAINNET,
            apiKey: apiKey,
        });
        const stonApiClient = new StonApiClient({});

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫
        const mnemonics = env.MNEMONIC.split(' ');
        if (mnemonics.length !== 24) {
            throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è 24 —Å–ª–æ–≤–∞ –º–Ω–µ–º–æ–Ω–∏–∫–∏');
        }

        const keyPair = await mnemonicToPrivateKey(mnemonics);
        if (!keyPair) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å KeyPair');
        }

        const wallet = WalletContractV4.create({
            workchain: 0,
            publicKey: keyPair.publicKey,
        });

        return new SwapService(client, stonApiClient, keyPair, wallet);
    }

    private static handleApiError(error: unknown): never {
        if (error instanceof Error && 'isAxiosError' in error) {
            const axiosError = error as AxiosError<ApiErrorResponse>;

            if (axiosError.code === 'ECONNABORTED' || error.message?.includes('timeout')) {
                throw new Error('TON API Connection Error: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
            }
            if (axiosError.response) {
                throw new Error(`TON API Error ${axiosError.response.status}: ${
                    axiosError.response.data?.error || error.message
                }`);
            }
            if (axiosError.request) {
                throw new Error('TON API Connection Error: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }

        if (error instanceof Error) {
            throw new Error(`TON API Error: ${error.message}`);
        }

        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ TON API');
    }

    private async getSwapTxParams(simulation: SimulationResult, walletAddress: string, queryId: number): Promise<SenderArguments> {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä–∞
        const routerMetadata = simulation.routerMetadata ||
            await this.stonApiClient.getRouter(simulation.routerAddress);
        if (!routerMetadata) {
            throw new Error(`–†–æ—É—Ç–µ—Ä ${simulation.routerAddress} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        const dexContracts = dexFactory(routerMetadata);
        const router = this.client.open(dexContracts.Router.create(routerMetadata.address));

        const sharedTxParams = {
            queryId,
            userWalletAddress: walletAddress,
            offerAmount: simulation.offerUnits,
            minAskAmount: simulation.minAskUnits,
        };

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤–æ–ø–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (simulation.askAddress !== TON_ADDRESS && simulation.offerAddress !== TON_ADDRESS) {
            return router.getSwapJettonToJettonTxParams({
                ...sharedTxParams,
                offerJettonAddress: simulation.offerAddress,
                askJettonAddress: simulation.askAddress,
            });
        }

        const proxyTon = dexContracts.pTON.create(routerMetadata.ptonMasterAddress);

        if (simulation.offerAddress === TON_ADDRESS) {
            return router.getSwapTonToJettonTxParams({
                ...sharedTxParams,
                proxyTon,
                askJettonAddress: simulation.askAddress,
            });
        } else {
            return router.getSwapJettonToTonTxParams({
                ...sharedTxParams,
                proxyTon,
                offerJettonAddress: simulation.offerAddress,
            });
        }
    }

    async simulateBuySwap(tokenAddress: string, amount: number, slippageTolerance: number = 0.01): Promise<SimulationResult> {
        const simulation = await this.stonApiClient.simulateSwap({
            offerAddress: TON_ADDRESS,
            askAddress: tokenAddress,
            offerUnits: toNano(amount.toString()).toString(),
            slippageTolerance: slippageTolerance.toString(),
            dexV2: true,
        }).catch(SwapService.handleApiError);

        const routerMetadata = await this.stonApiClient.getRouter(simulation.routerAddress)
            .catch(SwapService.handleApiError);

        if (!routerMetadata) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä–∞');
        }

        return { ...simulation, routerMetadata };
    }

    async simulateSellSwap(tokenAddress: string, amount: number, slippageTolerance: number = 0.01): Promise<SimulationResult> {
        const simulation = await this.stonApiClient.simulateSwap({
            offerAddress: tokenAddress,
            askAddress: TON_ADDRESS,
            offerUnits: toNano(amount.toString()).toString(),
            slippageTolerance: slippageTolerance.toString(),
            dexV2: true,
        }).catch(SwapService.handleApiError);

        const routerMetadata = await this.stonApiClient.getRouter(simulation.routerAddress)
            .catch(SwapService.handleApiError);

        if (!routerMetadata) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä–∞');
        }

        return { ...simulation, routerMetadata };
    }

    async executeSwap(simulation: SimulationResult): Promise<void> {
        if (!this.wallet || !this.keyPair) {
            throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–æ–≤
        const isBuyOperation = simulation.offerAddress === TON_ADDRESS;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–∫–æ–≥–¥–∞ –æ—Ç–¥–∞–µ–º TON)
        if (isBuyOperation) {
            const balance = await this.client.getBalance(this.wallet.address);
            if (balance === 0n) {
                throw new Error('–ö–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å');
            }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const queryId = Date.now();
        const txParams = await this.getSwapTxParams(
            simulation,
            this.wallet.address.toString(),
            queryId,
        );

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const contract = this.client.open(this.wallet);
        await contract.sendTransfer({
            seqno: await contract.getSeqno(),
            secretKey: this.keyPair.secretKey,
            messages: [
                internal({
                    to: txParams.to,
                    value: txParams.value,
                    body: txParams.body,
                }),
            ],
        }).catch(SwapService.handleApiError);
    }

    getWalletAddress(): string {
        return this.wallet.address.toString();
    }
}

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
const runTest = async (): Promise<void> => {
    try {
        const swapService = await SwapService.createSwapService();
        const FPIBANK = 'EQD0KpcRMh-sKO2z5-vOjgvFjTT58tO-2Nmvxqg5ocFQFtWz';

        // eslint-disable-next-line no-undef
        console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –∞–¥—Ä–µ—Å–æ–º:', swapService.getWalletAddress());

        // –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ jetton
        // eslint-disable-next-line no-undef
        console.log('\nüìà –¢–µ—Å—Ç–∏—Ä—É–µ–º TON -> jetton —Å–≤–æ–ø');
        const buySimulation = await swapService.simulateBuySwap(FPIBANK, 0.1, 0.01);
        await swapService.executeSwap(buySimulation);

        // –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∂–∏ jetton
        // eslint-disable-next-line no-undef
        console.log('\nüìâ –¢–µ—Å—Ç–∏—Ä—É–µ–º jetton -> TON —Å–≤–æ–ø');
        const sellSimulation = await swapService.simulateSellSwap(FPIBANK, 100.0, 0.01);
        await swapService.executeSwap(sellSimulation);
    } catch (error) {
        // eslint-disable-next-line no-undef
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (argv[1]?.endsWith('swap.service.ts')) {
    (async (): Promise<void> => {
        try {
            await runTest();
        } catch (error) {
            // eslint-disable-next-line no-undef
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
            // eslint-disable-next-line no-undef
            process.exit(1);
        }
    })();
}